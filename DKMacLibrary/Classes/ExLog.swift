//
//  LogUtil.swift
//  PeopleTable
//
//  Created by yuya on 2016/03/10.
//  Copyright ¬© 2016Âπ¥ yuya. All rights reserved.
//

import Foundation

/// „É≠„Ç∞Áî®„ÇØ„É©„Çπ
///
open class ExLog {
    #if DEBUG
    private let Debug = true
    #else
    private let Debug = false
    #endif
    
    // „Éï„Ç°„Ç§„É´„Å´„É≠„Ç∞„ÇíÂá∫Âäõ„Åô„Çã„Åã„Å©„ÅÜ„Åã
    private var shouldFileOutput = true
    // „Ç¢„Éó„É™ÂêçÔºö„É≠„Ç∞„Éï„Ç°„Ç§„É´„Çí‰øùÂ≠ò„Åô„Çã„Éï„Ç©„É´„ÉÄÂêç„Å´Âà©Áî®„Åï„Çå„Çã
    private var appName = "DKMacLibraryTest"
    // „É≠„Ç∞„Éï„Ç°„Ç§„É´Âêç
    private var fileName = "debug-log.log"
    
    // Áõ¥Ââç„ÅÆË°®Á§∫ÂÜÖÂÆπ„ÇíË®òÈå≤„Åó„Å¶„ÅÑ„ÇãÊñáÂ≠óÂàó
    private var history: String = ""
    
    private static let instance = ExLog()
    private init() {
    }
    
    private func _log(classFile: String = #file,
                      functionName: String = #function,
                      lineNumber: Int = #line,
                      type: ExLogType = .Info,
                      format: ExLogFormat = .Normal,
                      _ runOnDebug:() -> Any?) {
        guard Debug else {
            return
        }
        
        let msg = runOnDebug() ?? "nil"
        let classDetail = URL(string: String(classFile))?.lastPathComponent  ?? classFile
        let formatMsg = format.string(emoji: type.getEmoji(),
                                      date: Date(),
                                      msg: msg,
                                      functionName: functionName,
                                      classDetail: classDetail,
                                      lineNumber: lineNumber)
        self.output(formatMsg)
    }
    
    private func output(_ formattedMsg: String) {
        // „Ç≥„É≥„ÇΩ„Éº„É´„Å´Âá∫Âäõ
        print(formattedMsg)
        //  „Éï„Ç°„Ç§„É´„Å´Âá∫Âäõ„Åô„Çã„ÅãÊ±∫ÂÆö
        if self.shouldFileOutput {
            self.outputToFile(formattedMsg)
        }
        // Â±•Ê≠¥„Å´‰øùÂ≠ò
        self.history = formattedMsg
    }
    
    private func outputToFile(_ msg: String) {
        // To Download this file
        // iOS: you have to add "Application supports iTunes file sharing=true" flag to info.plist/
        // MacOS: check Document folder
        guard let fileUrl = self.getLogFileForLog() else {
            print("folderUrl is nil")
            return
        }
        
        guard let output = OutputStream(url: fileUrl, append: true) else {
            print("output is nil")
            return
        }
        
        output.open()
        
        defer {
            output.close()
        }
        
        guard let data = (msg + "\n").data(using: .utf8, allowLossyConversion: false) else {
            return
        }
        
        let result = data.withUnsafeBytes { (pointer: UnsafeRawBufferPointer) -> UInt8 in
            guard let baseAddress = pointer.bindMemory(to: UInt8.self).baseAddress else {
                return 0
            }
            output.write(baseAddress, maxLength: data.count)
            return pointer.load(as: UInt8.self)
        }

//        let result = data.withUnsafeBytes {
//            output.write($0, maxLength: data.count)
//        }
        if result <= 0 {
            print("[\(result)]fail to write msg into \(fileUrl)")
        }
    }
    
    public func getLogFileForLog() -> URL? {
        return self.createOrGetFolderForLog()?.appendingPathComponent(self.fileName)
    }
    
    public func createOrGetFolderForLog() -> URL? {
        let fm = FileManager.default
        guard let dir = fm.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("************************")
            print("* ==> documentDirectory is nil")
            print("************************")
            return nil
        }
        let folderUrl = dir.appendingPathComponent(self.appName)
        let path = folderUrl.path
        if !fm.fileExists(atPath: path) {
            print("Not found directory and try to create this dir(\(path))")
            do {
                try fm.createDirectory( atPath: path, withIntermediateDirectories: true, attributes: nil)
                print("************************")
                print("* ==> Created!")
                print("************************")
            } catch {
                //„Ç®„É©„ÉºÂá¶ÁêÜ
                print("************************")
                print("* ==> Fail to create folder: \(path)")
                dump("* ==> \(error)")
                print("************************")
            }
        }
        return folderUrl
    }
    
    /// ÂàùÊúüË®≠ÂÆö„ÄÇAppDelegate„ÅÆapplicationDidFinishLaunching„ÅßÂëº„Å≥Âá∫„Åô„Åì„Å®„ÇíÊÉ≥ÂÆö„Åó„Å¶„ÅÑ„Çã
    /// - parameter appName: „É≠„Ç∞„Éï„Ç°„Ç§„É´„ÇíÊ†ºÁ¥ç„Åô„Çã„Éâ„Ç≠„É•„É°„É≥„Éà„Éï„Ç©„É´„ÉÄ„ÉºÂÜÖ„ÅÆ„Éï„Ç©„É´„ÉÄ„ÉºÂêç(Init: "DKMacLibraryTest")
    /// - parameter fileName: „É≠„Ç∞„Éï„Ç°„Ç§„É´Âêç(Init: "debug-log.log")
    public static func configure(appName: String? = nil, fileName: String? = nil, shouldFileOutput: Bool? = nil) {
        ExLog.instance.appName = appName ?? ExLog.instance.appName
        ExLog.instance.fileName = fileName ?? ExLog.instance.fileName
        ExLog.instance.shouldFileOutput = shouldFileOutput ?? ExLog.instance.shouldFileOutput
    }
    
    /// „É≠„Ç∞Âá∫Âäõ: ÂÖ®„Å¶„ÅÆË®≠ÂÆö„Åå„Ç´„Çπ„Çø„Éû„Ç§„Ç∫ÂèØËÉΩ
    public static func log(_ object: Any? = "No Log",
                           classFile: String = #file,
                           functionName: String = #function,
                           lineNumber: Int = #line,
                           type: ExLogType = .Info,
                           format: ExLogFormat = .Normal) {
        ExLog.instance._log(classFile: classFile, functionName: functionName, lineNumber: lineNumber, type: type, format: format) {
            return object
        }
    }
    
    /// „Éá„Éê„ÉÉ„Ç∞ÊôÇ„Åó„ÅãÂÆüË°å„Åó„Åü„Åè„Å™„ÅÑ„Ç≥„Éº„Éâ„Å´„Çà„Å£„Å¶„ÅÆ„ÅøÂèñÂæó„Åß„Åç„Çã„É≠„Ç∞„ÇíÂá∫Âäõ„Åô„Çã„É°„ÇΩ„ÉÉ„Éâ„ÄÇ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„É°„ÇΩ„ÉÉ„Éâ„ÅÆËøî„ÇäÂÄ§„Åå„É≠„Ç∞Âá∫Âäõ„Åï„Çå„Çã„ÄÇ
    public static func log(classFile: String = #file,
                           functionName: String = #function,
                           lineNumber: Int = #line,
                           type: ExLogType = .Info,
                           format: ExLogFormat = .Normal,
                           _ runOnDebug:() -> Any?) {
        ExLog.instance._log(classFile: classFile, functionName: functionName, lineNumber: lineNumber, type: type, format: format, runOnDebug)
    }
    
    /// „É°„ÇΩ„ÉÉ„ÉâÂêç„Çí„É≠„Ç∞„Å´Âá∫Âäõ
    public static func method(classFile: String = #file,
                              functionName: String = #function,
                              lineNumber: Int = #line,
                              type: ExLogType = .Info,
                              format: ExLogFormat = .Normal) {
        let msg = functionName
        ExLog.instance._log(classFile: classFile, functionName: functionName, lineNumber: lineNumber, type: type, format: format) {
            return msg
        }
    }
    
    public static func emptyLine(_ lineNums: Int = 1) {
        let log = ExLog.instance
        if log.Debug {
            var msg = ""
            for _ in 1..<lineNums {
                msg = msg + "\n"
            }
            log.output(msg)
        }
    }
    
    // Âêå„ÅòÊñáÂ≠ó„ÇíË§áÊï∞ÂÄãÂá∫Âäõ„Åô„Çã„ÄÇ„Çª„Éë„É¨„Éº„Çø„Éº„Å®„Åó„Å¶Âà©Áî®„Åß„Åç„Çã„ÄÇÔºà‰æãÔºö„ÄÄ"----------"Ôºâ
    public static func separatorLine(_ character: String = "-", repeatNum: Int = 10, postFix: String? = nil) {
        let log = ExLog.instance
        if log.Debug {
            var msg = ""
            for _ in 0..<repeatNum {
                msg = msg + character
            }
            if let postFix = postFix {
               msg = msg + postFix
            }
            log.output(msg)
            log.history = msg
        }
    }
    
    public static func error(_ object: Any? = "No Log",
                             classFile: String = #file,
                             functionName: String = #function,
                             lineNumber: Int = #line,
                             format: ExLogFormat = .Normal) {
        log(object, classFile: classFile, functionName: functionName, lineNumber: lineNumber, type: .Error, format: format)
    }
    
    public static func fatalError(_ object: Any? = "No Log",
                                  classFile: String = #file,
                                  functionName: String = #function,
                                  lineNumber: Int = #line,
                                  format: ExLogFormat = .Normal) {
        log(object, classFile: classFile, functionName: functionName, lineNumber: lineNumber, type: .Error, format: format)
        fatalError(object)
    }
    
    public static func getHistory() -> String {
        return ExLog.instance.history
    }
}

public enum ExLogType: String {
    case Info = ""
    case Important = "[Important]"
    case Debug = "[DEBUG]"
    case Error = "[Error]"
    
    func getEmoji() -> String {
        //ÁµµÊñáÂ≠óË°®Á§∫: command + control + „Çπ„Éö„Éº„Çπ„Ç≠„Éº
        switch self {
        case .Info:
            return "üó£"
        case .Important:
            return "üìç"
        case .Debug:
            return "‚úÇÔ∏è"
        case .Error:
            return "‚ö†Ô∏è"
        }
    }
}

public enum ExLogFormat {
    case Normal
    case Short
    case NoPostFix
    case Raw
    func string(emoji: String, date: Date, msg: Any, functionName: String, classDetail: String, lineNumber: Int) -> String {
        // Êó•ÊôÇ„Éï„Ç©„Éº„Éû„ÉÉ„Éà
        let dateFormatter = DateFormatter()
        dateFormatter.locale = Locale(identifier: "en_US_POSIX")
        
        let threadName = Thread.isMainThread ? "Main" : "Sub "
        
        switch self {
        case .Normal:
            dateFormatter.dateFormat = "yyyy/MM/dd HH:mm"
            let dateStr = dateFormatter.string(from: Date())
            return "[\(threadName)][\(emoji)][\(dateStr)]:\(msg) [\(functionName)/\(classDetail)(\(lineNumber))]"
        case .NoPostFix:
            dateFormatter.dateFormat = "yyyy/MM/dd HH:mm"
            let dateStr = dateFormatter.string(from: Date())
            return "[\(threadName)][\(emoji)][\(dateStr)]:\(msg)"
        case .Short:
            dateFormatter.dateFormat = "HH:mm:ss"
            let dateStr = dateFormatter.string(from: Date())
            return "[\(threadName)][\(emoji)][\(dateStr)]:\(msg) [\(classDetail)(\(lineNumber))]"
        case .Raw:
            return "\(msg)"
        }
    }
}
